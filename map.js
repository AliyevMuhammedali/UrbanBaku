// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –ë–∞–∫—É =====
const map = L.map('map', {
  center: [40.4093, 49.8671],
  zoom: 13
});

// ===== –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ =====
const streets = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '&copy; OpenStreetMap contributors'
});

const satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
  maxZoom: 19,
  attribution: 'Tiles ¬© Esri'
});

const dark = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
  maxZoom: 19,
  attribution: '&copy; CartoDB',
  subdomains: 'abcd'
});

// –°–ª–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
streets.addTo(map);

// ===== –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–ª–æ—ë–≤ =====
const baseLayers = {
  "üó∫ –£–ª–∏—Ü—ã": streets,
  "üõ∞ –°–ø—É—Ç–Ω–∏–∫": satellite,
  "üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞": dark
};
L.control.layers(baseLayers).addTo(map);

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ =====
function updateTransport(select) {
  selectedTransport = select.value;
}

let routingControl = null;
let selectedTransport = 'foot'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–µ—à–∫–æ–º

function routeTo(latlng) {
  if (routingControl) {
    map.removeControl(routingControl);
  }

  if (!navigator.geolocation) {
    alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
    return;
  }

  navigator.geolocation.getCurrentPosition(position => {
    const userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

    routingControl = L.Routing.control({
      waypoints: [
        userLatLng,
        L.latLng(latlng[0], latlng[1])
      ],
      router: L.Routing.osrmv1({
        serviceUrl: `https://router.project-osrm.org/route/v1/${selectedTransport}`
      }),
      lineOptions: {
        styles: [{ color: 'cyan', weight: 5 }]
      },
      show: false,
      addWaypoints: false
    }).addTo(map);
  }, () => {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.");
  });
}


// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ GeoJSON =====
fetch('data/locations.geojson')
  .then(response => response.json())
  .then(data => {
    L.geoJSON(data, {
      onEachFeature: function (feature, layer) {
        if (feature.properties && feature.properties.name) {
          const name = feature.properties.name;
          const desc = feature.properties.description || '';
          const coords = layer.getLatLng();

          const popupContent = `
            <strong>${name}</strong><br>
            ${desc}<br><br>
            <select id="transport-select" onchange="updateTransport(this)">
              <option value="foot">üö∂ –ü–µ—à–∫–æ–º</option>
              <option value="car">üöó –ú–∞—à–∏–Ω–∞</option>
              <option value="bike">üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥</option>
            </select><br><br>
            <button onclick="routeTo([${coords.lat}, ${coords.lng}])">üìç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</button>
          `;
          layer.bindPopup(popupContent);
        }
      }
    }).addTo(map);
  })
  .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON:", error));

// ===== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ =====
function updateTransport(select) {
  selectedTransport = select.value;
}

// ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ =====
function routeTo(destinationLatLng) {
  if (!navigator.geolocation) {
    alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
    return;
  }

  navigator.geolocation.getCurrentPosition(position => {
    const start = L.latLng(position.coords.latitude, position.coords.longitude);
    const end = L.latLng(destinationLatLng[0], destinationLatLng[1]);

    if (routingControl) {
      map.removeControl(routingControl);
    }

    routingControl = L.Routing.control({
      waypoints: [start, end],
      lineOptions: {
        styles: [{ color: 'red', opacity: 0.8, weight: 5 }]
      },
      router: L.Routing.osrmv1({
        serviceUrl: `https://router.project-osrm.org/route/v1/${selectedTransport}`
      }),
      createMarker: function () { return null; },
      routeWhileDragging: false,
      draggableWaypoints: false,
      addWaypoints: false,
      show: false
    }).on('routesfound', function (e) {
      const route = e.routes[0];
      const distance = (route.summary.totalDistance / 1000).toFixed(2);
      const time = Math.ceil(route.summary.totalTime / 60);

      L.popup()
        .setLatLng(end)
        .setContent(`–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º<br>–í—Ä–µ–º—è: ~${time} –º–∏–Ω`)
        .openOn(map);
    }).addTo(map);
  }, error => {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + error.message);
  });
}

// ===== –ö–Ω–æ–ø–∫–∞ "–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" =====
const locateControl = L.control({ position: 'topleft' });
locateControl.onAdd = function (map) {
  const button = L.DomUtil.create('button', 'locate-button');
  button.title = '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
  button.innerHTML = 'üìç';
  L.DomEvent.on(button, 'click', function (e) {
    e.stopPropagation();
    e.preventDefault();
    map.locate({ setView: true, maxZoom: 16 });
    map.once('locationfound', function (e) {
      L.marker(e.latlng).addTo(map).bindPopup("–í—ã –∑–¥–µ—Å—å").openPopup();
      L.circle(e.latlng, {
        radius: e.accuracy,
        color: '#136aec',
        fillOpacity: 0.1
      }).addTo(map);
    });
    map.once('locationerror', function (e) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + e.message);
 // ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –ë–∞–∫—É =====
const map = L.map('map', {
  center: [40.4093, 49.8671],
  zoom: 13
});

// ===== –°–ª–æ–∏ =====
const streets = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '&copy; OpenStreetMap contributors'
});

const satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
  maxZoom: 19,
  attribution: 'Tiles ¬© Esri'
});

const dark = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
  maxZoom: 19,
  attribution: '&copy; CartoDB',
  subdomains: 'abcd'
});

streets.addTo(map);

const baseLayers = {
  "üó∫ –£–ª–∏—Ü—ã": streets,
  "üõ∞ –°–ø—É—Ç–Ω–∏–∫": satellite,
  "üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞": dark
};
L.control.layers(baseLayers).addTo(map);

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ =====
let routingControl = null;
let selectedTransport = 'foot';

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ =====
function updateTransport(select) {
  selectedTransport = select.value;
}

// ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ =====
function routeTo(latlng) {
  if (routingControl) {
    map.removeControl(routingControl);
  }

  if (!navigator.geolocation) {
    alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.");
    return;
  }

  navigator.geolocation.getCurrentPosition(position => {
    const userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

    routingControl = L.Routing.control({
      waypoints: [
        userLatLng,
        L.latLng(latlng[0], latlng[1])
      ],
      router: L.Routing.osrmv1({
        serviceUrl: `https://router.project-osrm.org/route/v1/${selectedTransport}`
      }),
      lineOptions: {
        styles: [{ color: 'cyan', weight: 5 }]
      },
      createMarker: () => null,
      show: false,
      addWaypoints: false
    }).addTo(map);
  }, () => {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.");
  });
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON =====
fetch('data/locations.geojson')
  .then(response => response.json())
  .then(data => {
    const geoJsonLayer = L.geoJSON(data, {
      onEachFeature: function (feature, layer) {
        const props = feature.properties;
        const latlng = feature.geometry.coordinates.slice().reverse();

        const popup = `
          <strong>${props.name}</strong><br>
          ${props.description || ''}<br><br>
          <button onclick="routeTo([${latlng}])">üìç –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</button>
        `;
        layer.bindPopup(popup);
      }
    }).addTo(map);

    // –î–æ–±–∞–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    new L.Control.Search({
      layer: geoJsonLayer,
      propertyName: 'name',
      zoom: 17,
      initial: false,
      hideMarkerOnCollapse: true
    }).addTo(map);
  })
  .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON:", error));

// ===== –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
map.locate({ setView: false, watch: false });
map.on("locationfound", (e) => {
  L.circleMarker(e.latlng, {
    radius: 6,
    color: "blue",
    fillColor: "#30f",
    fillOpacity: 0.8
  }).addTo(map).bindPopup("–í—ã –∑–¥–µ—Å—å").openPopup();
});
   });
  });
  return button;
};
locateControl.addTo(map);
